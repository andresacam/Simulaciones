import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# --- Configuraci√≥n Inicial y Estado de la Sesi√≥n ---

st.set_page_config(layout="wide", page_title="Simulador de Costos Monte Carlo")

# Inicializa las variables en el estado de la sesi√≥n si no existen
if 'iteraciones' not in st.session_state:
    st.session_state.iteraciones = 1000  # Valor por defecto
if 'data' not in st.session_state:
    st.session_state.data = []
if 'simulation_run' not in st.session_state:
    st.session_state.simulation_run = False

# --- Funciones ---

def run_monte_carlo_simulation(data, iterations):
    """
    Ejecuta una simulaci√≥n de Monte Carlo basada en una distribuci√≥n triangular.
    Guarda los resultados detallados y totales en el estado de la sesi√≥n.
    """
    simulation_results = {}
    for index, row in data.iterrows():
        item_name = row['Nombre del Item']
        min_val = row['Valor M√≠nimo']
        probable_val = row['Valor Probable']
        max_val = row['Valor M√°ximo']
        
        simulation_results[item_name] = np.random.triangular(min_val, probable_val, max_val, iterations)
        
    df_simulation = pd.DataFrame(simulation_results)
    total_cost_per_iteration = df_simulation.sum(axis=1)
    
    # Guardar ambos resultados en el estado de la sesi√≥n para uso futuro
    st.session_state.df_simulation_results = df_simulation
    st.session_state.results = total_cost_per_iteration
    st.session_state.simulation_run = True

# --- Barra Lateral (Sidebar) ---

with st.sidebar:
    st.markdown("<h1 style='text-align: center;'>Configuraci√≥n</h1>", unsafe_allow_html=True)
    st.session_state.iteraciones = st.number_input(
        "N√∫mero de Iteraciones", 
        min_value=1, 
        max_value=100000, 
        value=st.session_state.iteraciones, 
        step=1000,
        help="N√∫mero de escenarios a simular. Un n√∫mero mayor da m√°s precisi√≥n pero tarda m√°s."
    )
    
    if st.button("Restablecer Todo", type="primary", use_container_width=True):
         st.session_state.data = []
         # Limpiar tambi√©n los resultados de la simulaci√≥n si existen
         st.session_state.simulation_run = False
         if 'results' in st.session_state:
             del st.session_state.results
         if 'df_simulation_results' in st.session_state:
             del st.session_state.df_simulation_results
         st.success("¬°Aplicaci√≥n restablecida!")

# --- Contenido Principal de la P√°gina ---

st.title("Calculadora de Costos de Proyecto con Simulaci√≥n Monte Carlo")
st.markdown("Agrega los items de tu proyecto con sus costos estimados (m√≠nimo, m√°s probable y m√°ximo) y luego ejecuta la simulaci√≥n para entender el rango probable de costos totales.")

# --- Formulario de Entrada de Datos ---
with st.expander("Agregar un nuevo item al proyecto", expanded=True):
    with st.form("item_form", clear_on_submit=True):
        item_name = st.text_input("Nombre del Item", placeholder="Ej: Dise√±o de UI/UX")
        col1, col2, col3 = st.columns(3)
        with col1:
            valor_minimo = st.number_input("Valor M√≠nimo ($)", value=None, min_value=0.0, format="%.2f", placeholder="Costo pesimista")
        with col2:
            valor_probable = st.number_input("Valor Probable ($)", value=None, min_value=0.0, format="%.2f", placeholder="Costo m√°s probable")
        with col3:
            valor_maximo = st.number_input("Valor M√°ximo ($)", value=None, min_value=0.0, format="%.2f", placeholder="Costo optimista")

        submitted = st.form_submit_button("Agregar Item")
        if submitted:
            if not all([item_name, valor_minimo is not None, valor_probable is not None, valor_maximo is not None]):
                st.warning("Por favor, completa todos los campos para agregar el item.")
            elif not (valor_minimo <= valor_probable <= valor_maximo):
                st.error("Error en los valores: Aseg√∫rate de que M√≠nimo ‚â§ Probable ‚â§ M√°ximo.")
            else:
                st.session_state.data.append({
                    'Nombre del Item': item_name,
                    'Valor M√≠nimo': valor_minimo,
                    'Valor Probable': valor_probable,
                    'Valor M√°ximo': valor_maximo
                })
                st.success(f"Item '{item_name}' agregado.")

# --- Tabla de Items y Bot√≥n de Simulaci√≥n ---
if st.session_state.data:
    st.subheader("Items del Proyecto")
    df = pd.DataFrame(st.session_state.data)
    st.dataframe(df)

    if st.button("üöÄ Ejecutar Simulaci√≥n", type="primary", use_container_width=True):
        st.session_state.dfg = df
        with st.spinner(f"Ejecutando {st.session_state.iteraciones:,} simulaciones..."):
            run_monte_carlo_simulation(df, st.session_state.iteraciones)
        st.success("¬°Simulaci√≥n completada!")
else:
    st.info("A√∫n no has agregado items a tu proyecto.")

st.divider()

# --- Secci√≥n de Resultados ---
if st.session_state.simulation_run:
    results = st.session_state.results
    st.subheader("üìä Resultados de la Simulaci√≥n")

    # M√©tricas clave
    stats = results.describe(percentiles=[.10, .50, .90])
    costo_probable = stats['50%']
    costo_promedio = stats['mean']
    costo_p90 = stats['90%']

    col1, col2, col3 = st.columns(3)
    col1.metric(label="Costo M√°s Probable (P50)", value=f"${costo_probable:,.2f}")
    col2.metric(label="Costo Promedio", value=f"${costo_promedio:,.2f}")
    col3.metric(label="Costo con 90% Confianza (P90)", value=f"${costo_p90:,.2f}", 
                help="Hay un 90% de probabilidad de que el costo del proyecto sea menor o igual a este valor.")

    # Histograma de resultados
    st.subheader("Distribuci√≥n de Costos del Proyecto")
    fig, ax = plt.subplots()
    ax.hist(results, bins=50, edgecolor='k', alpha=0.7, color='#1f77b4')
    ax.axvline(costo_promedio, color='#d62728', linestyle='--', linewidth=2, label=f"Promedio: ${costo_promedio:,.2f}")
    ax.axvline(costo_probable, color='#2ca02c', linestyle='--', linewidth=2, label=f"P50: ${costo_probable:,.2f}")
    ax.set_xlabel("Costo Total del Proyecto ($)")
    ax.set_ylabel("Frecuencia")
    ax.legend()
    ax.grid(True, linestyle=':', alpha=0.6)
    st.pyplot(fig)

    # Expander con estad√≠sticas detalladas
    with st.expander("Ver Estad√≠sticas Detalladas"):
        st.dataframe(stats.to_frame(name='Valor').style.format("${:,.2f}"))

